let nodeTypes = ['company', 'address', 'person', 'bankAccount', 'sanctionsList'];

let edgeTypes = ['locate at', 'has a', 'belongs to', 'registered address', 'lives at'];

let countries = ['INDIA', 'USA', 'CANADA', 'CHINA', 'RUSSIA', 'GERMANY'];

let icons = [
    'bank',    'officer',    'email',    'website',    'contract',
    'users',    'balance',    'money',    'phone',    'sector',
    'address',    'person',    'city',    'amount',    'account-number',
    'customer',    'industry',    'country',    'intermediary',    'counterparty',
    'company',    'male',    'business',    'ceo',    'url',
    'ip-address',    'account',    'default',    'agreement',    'credit-card',
    'state',    'corporate',    'user',    'entity',    'zip',
    'percentage',    'transaction',    'invoice',    'transfer',    'subsidiar'
   ];
var possiblityOfAddress = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

data = {
    edges:[],
    nodes:[]
};

class Node{

    constructor(id, name, country, balance, zip, address, icon, isActive, type){
        this.id = id;
        this.name = name;
        this.country = country;
        this.balance = balance;
        this.zip = zip;
        this.address = address;
        this.isActive = isActive;
        this.type = type;
    }
}

class Edge{

    constructor(id, name, source, target, country, balance, zip, address, icon, isActive, type){
        this.id = id;
        this.name = name;
        this.source = source;
        this.target = target;
        this.country = country;
        this.balance = balance;
        this.zip = zip;
        this.address = address;
        this.isActive = isActive;
        this.type = type;
    }

}

for (let i = 0; i < 50; i++) {

    let id = 'node'+i;
    let name ='nodeName'+i;
    let country = countries[Math.floor(Math.random() * countries.length)];
    let balance = Math.floor(Math.random() * (100000 - 10000));
    let zip = Math.floor(Math.random() * (999999 - 10000));
    let tempAddress = '';
    let limitForAddress = 42;
    for (let k = 0; k < limitForAddress; k++) {
        tempAddress += possiblityOfAddress.charAt(Math.floor(Math.random() * possiblityOfAddress.length));        
        if((k % 14) == 1){
            tempAddress += ',';
        }
    }
    tempAddress += ", " + zip;
    let address = tempAddress;
    let icon = icons[Math.floor(Math.random() * icons.length)];
    
    let isActive = (Math.floor(Math.random()*2)) ? true : false;
    let type = nodeTypes[Math.floor(Math.random() * nodeTypes.length)];

    let node = new Node(id, name, country, balance, zip, address, icon, isActive, type);

    data.nodes.push(node);
}


for (let j = 0; j < 100; j++) {

    let id = 'edge'+j;
    let name = 'edgeName'+j;
    let source = data.nodes[Math.floor(Math.random() * data.nodes.length)].id;
    let tempTarget = data.nodes[Math.floor(Math.random() * data.nodes.length)].id;
    
    while(tempTarget == source){
        tempTarget = data.nodes[Math.floor(Math.random() * data.nodes.length)].id;
    }
    
    let target = tempTarget;
    let country = countries[Math.floor(Math.random() * countries.length)];
    let balance = Math.floor(Math.random() * (100000 - 10000));
    let zip = Math.floor(Math.random() * (999999 - 10000));
    let tempAddress = '';
    let limitForAddress = 42;
    for (let k = 0; k < limitForAddress; k++) {
        tempAddress += possiblityOfAddress.charAt(Math.floor(Math.random() * possiblityOfAddress.length));        
        if((k % 14) == 1){
            tempAddress += ',';
        }
    }
    tempAddress += ", " + zip;
    let address = tempAddress;
    let icon = icons[Math.floor(Math.random() * icons.length)];

    let isActive = (Math.floor(Math.random()*2)) ? true : false;

    let type = edgeTypes[Math.floor(Math.random() * edgeTypes.length)];

    let edge = new Edge(id, name, source, target, country, balance, zip, address, icon, isActive, type);
    data.edges.push(edge);
}

console.log(data);